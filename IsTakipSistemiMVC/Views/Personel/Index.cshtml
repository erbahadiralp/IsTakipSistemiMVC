@model IEnumerable<IsTakipSistemiMVC.Models.Personeller>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutSistemYoneticisi.cshtml";
}

<style>
    .custom-button {
        margin: 5px; /* Butonlar arasındaki boşluğu artır */
        transition: background-color 0.3s ease; /* Geçiş efekti */
    }

        .custom-button:hover {
            background-color: #0056b3; /* Hover rengi */
            color: white; /* Yazı rengini beyaz yap */
        }

    .button-container {
        display: flex;
        justify-content: flex-start; /* Butonları sola hizala */
        gap: 10px; /* Butonlar arasındaki mesafeyi ayarla */
    }

    .search-bar {
        flex-grow: 1;
        display: flex;
        justify-content: flex-end;
    }

    .search-input {
        width: 200px; /* Genişliği küçült */
        padding: 5px 10px; /* İç boşlukları ayarla */
        border: 1px solid #ccc;
        border-radius: 25px; /* Köşeleri yuvarlat */
        font-size: 14px; /* Font boyutunu küçült */
        outline: none;
        transition: box-shadow 0.3s ease;
    }

        .search-input:focus {
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Odaklandığında gölge efekti */
        }

    .photo {
        width: 50px; /* Fotoğraf genişliği */
        height: 50px; /* Fotoğraf yüksekliği */
        border-radius: 50%; /* Köşeleri yuvarlat (daire yap) */
        object-fit: cover; /* Fotoğrafı kapsayıcıya sığdır */
    }

    .sortable:hover {
        cursor: pointer;
    }

    .pagination {
        display: flex;
        justify-content: left;
        margin-top: 10px;
    }

    .page-link {
        margin: 0 5px;
        padding: 5px 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        text-decoration: none;
        color: #007bff;
    }

        .page-link.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        .page-link:hover {
            background-color: #0056b3;
            color: white;
        }
</style>

<div class="container mt-4">
    <div class="card mb-4">
        <div class="card-body">
            <div class="col button-container">
                <a href="@Url.Action("Olustur", "Personel")" class="btn btn-primary custom-button">
                    <i class="fas fa-plus"></i> Yeni Personel Ekle
                </a>
                <form method="post" action="@Url.Action("ExceleAktar","Personel")" class="d-inline-block">
                    <button type="submit" class="btn btn-success custom-button">
                        <i class="fas fa-file-excel"></i> Excel'e Aktar
                    </button>
                </form>
                <div class="search-bar">
                    <input type="text" id="searchInput" class="search-input" placeholder="Arama yap...">
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table id="personelTable" class="table table-hover">
                    <thead>
                        <tr class="text-center table-light">
                            <th style="width: 10%;">Fotoğraf</th>
                            <th style="width: 20%;" class="sortable" data-column="personelId">Personel Id</th>
                            <th style="width: 20%;" class="sortable" data-column="personelAdSoyad">Personel Adı Soyadı</th>
                            <th style="width: 20%;" class="sortable" data-column="birimAd">Birim Adı</th>
                            <th style="width: 20%;" class="sortable" data-column="yetkiTurAd">Personel Yetkisi</th>
                            <th style="width: 20%;">İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="text-center">
                                <td>
                                    <img src=">@Html.DisplayFor(model => item.personelFotograf)" alt="Fotoğraf" class="photo" />
                                </td>
                                <td data-column="personelId">@Html.DisplayFor(model => item.personelId)</td>
                                <td data-column="personelAdSoyad">@Html.DisplayFor(model => item.personelAdSoyad)</td>
                                <td data-column="birimAd">@Html.DisplayFor(model => item.Birimler.birimAd)</td>
                                <td data-column="yetkiTurAd">@Html.DisplayFor(model => item.YetkiTurler.yetkiTurAd)</td>
                                <td class="d-flex justify-content-center">
                                    <a href="@Url.Action("Detay", new { id = item.personelId })" class="btn btn-success custom-button me-2">
                                        <i class="fas fa-edit"></i> Detay
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script>

        //arama çubuğu
        document.getElementById('searchInput').addEventListener('keyup', function () {
            var input = document.getElementById('searchInput');
            var filter = input.value.toLowerCase();
            var table = document.getElementById('personelTable');
            var trs = table.getElementsByTagName('tr');
            for (var i = 1; i < trs.length; i++) {
                var tds = trs[i].getElementsByTagName('td');
                var display = false;
                for (var j = 0; j < tds.length; j++) {
                    if (tds[j].textContent.toLowerCase().indexOf(filter) > -1) {
                        display = true;
                    }
                }
                if (display) {
                    trs[i].style.display = "";
                } else {
                    trs[i].style.display = "none";
                }
            }
        });

        // Sıralama
        document.querySelectorAll('.sortable').forEach(function (header) {
            header.addEventListener('click', function () {
                var table = document.getElementById('personelTable');
                var tbody = table.tBodies[0];
                var rows = Array.from(tbody.querySelectorAll('tr'));
                var column = header.getAttribute('data-column');
                var order = header.getAttribute('data-order') === 'asc' ? 'desc' : 'asc';
                header.setAttribute('data-order', order);

                rows.sort(function (a, b) {
                    var cellA = a.querySelector('[data-column="' + column + '"]').textContent.trim();
                    var cellB = b.querySelector('[data-column="' + column + '"]').textContent.trim();

                    // Sayısal sıralama kontrolü
                    if (column === 'personelId') {
                        cellA = parseInt(cellA, 10);
                        cellB = parseInt(cellB, 10);
                        return order === 'asc' ? cellA - cellB : cellB - cellA;
                    }

                    // Metin sıralama
                    if (cellA < cellB) return order === 'asc' ? -1 : 1;
                    if (cellA > cellB) return order === 'asc' ? 1 : -1;
                    return 0;
                });

                rows.forEach(function (row) {
                    tbody.appendChild(row);
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            var table = document.getElementById('personelTable');
            var tbody = table.tBodies[0];
            var rows = Array.from(tbody.querySelectorAll('tr'));
            var rowsPerPage = 5;
            var currentPage = 1;
            var totalPages = Math.ceil(rows.length / rowsPerPage);

            function displayRows(startIndex) {
                rows.forEach(function (row, index) {
                    if (index >= startIndex && index < startIndex + rowsPerPage) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            function createPagination() {
                var pagination = document.createElement('div');
                pagination.className = 'pagination';
                for (var i = 1; i <= totalPages; i++) {
                    var pageLink = document.createElement('a');
                    pageLink.href = '#';
                    pageLink.innerText = i;
                    pageLink.className = 'page-link';
                    pageLink.dataset.page = i;
                    pageLink.addEventListener('click', function (e) {
                        e.preventDefault();
                        currentPage = parseInt(this.dataset.page);
                        displayRows((currentPage - 1) * rowsPerPage);
                        updatePagination();
                    });
                    pagination.appendChild(pageLink);
                }
                return pagination;
            }

            function updatePagination() {
                var pageLinks = document.querySelectorAll('.page-link');
                pageLinks.forEach(function (link) {
                    link.classList.remove('active');
                });
                pageLinks[currentPage - 1].classList.add('active');
            }

            var paginationContainer = document.createElement('div');
            paginationContainer.className = 'pagination-container';
            paginationContainer.appendChild(createPagination());

            table.parentNode.appendChild(paginationContainer);
            displayRows(0);
            updatePagination();
        });
</script>








